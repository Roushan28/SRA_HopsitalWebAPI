// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SRA_HopsitalWebAPI.Data;

namespace SRA_HopsitalWebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SRA_HopsitalWebAPI.Models.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoofDependent")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Registers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableDate = new DateTime(2021, 8, 30, 23, 25, 17, 571, DateTimeKind.Local).AddTicks(7099),
                            IdentityNo = "Test56",
                            Name = "TestUser1",
                            NoofDependent = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableDate = new DateTime(2021, 8, 30, 23, 25, 17, 571, DateTimeKind.Local).AddTicks(7802),
                            IdentityNo = "BODPR56",
                            Name = "TestUser2",
                            NoofDependent = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SRA_HopsitalWebAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Admin");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 9, 141, 114, 238, 5, 18, 44, 34, 191, 55, 143, 228, 151, 26, 176, 108, 226, 117, 6, 47, 215, 97, 37, 3, 204, 209, 129, 80, 91, 113, 78, 40, 41, 43, 230, 199, 63, 78, 103, 62, 214, 44, 162, 19, 63, 201, 43, 107, 139, 217, 60, 171, 92, 106, 11, 69, 44, 113, 49, 85, 92, 74, 65, 226 },
                            PasswordSalt = new byte[] { 39, 40, 82, 52, 46, 72, 188, 90, 218, 139, 174, 205, 29, 74, 102, 181, 203, 216, 27, 155, 127, 193, 170, 210, 171, 173, 83, 180, 244, 231, 27, 23, 36, 109, 140, 231, 71, 174, 250, 137, 157, 158, 161, 54, 112, 153, 12, 68, 66, 23, 133, 166, 70, 33, 115, 213, 27, 151, 170, 241, 63, 35, 179, 124, 94, 62, 152, 178, 19, 160, 252, 50, 86, 162, 202, 92, 37, 173, 128, 52, 225, 100, 204, 238, 32, 10, 28, 55, 172, 145, 169, 115, 192, 199, 169, 24, 223, 178, 243, 9, 159, 68, 163, 192, 228, 61, 41, 150, 197, 185, 121, 103, 147, 145, 88, 224, 167, 136, 144, 134, 217, 71, 111, 129, 213, 136, 12, 40 },
                            Username = "User1"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 9, 141, 114, 238, 5, 18, 44, 34, 191, 55, 143, 228, 151, 26, 176, 108, 226, 117, 6, 47, 215, 97, 37, 3, 204, 209, 129, 80, 91, 113, 78, 40, 41, 43, 230, 199, 63, 78, 103, 62, 214, 44, 162, 19, 63, 201, 43, 107, 139, 217, 60, 171, 92, 106, 11, 69, 44, 113, 49, 85, 92, 74, 65, 226 },
                            PasswordSalt = new byte[] { 39, 40, 82, 52, 46, 72, 188, 90, 218, 139, 174, 205, 29, 74, 102, 181, 203, 216, 27, 155, 127, 193, 170, 210, 171, 173, 83, 180, 244, 231, 27, 23, 36, 109, 140, 231, 71, 174, 250, 137, 157, 158, 161, 54, 112, 153, 12, 68, 66, 23, 133, 166, 70, 33, 115, 213, 27, 151, 170, 241, 63, 35, 179, 124, 94, 62, 152, 178, 19, 160, 252, 50, 86, 162, 202, 92, 37, 173, 128, 52, 225, 100, 204, 238, 32, 10, 28, 55, 172, 145, 169, 115, 192, 199, 169, 24, 223, 178, 243, 9, 159, 68, 163, 192, 228, 61, 41, 150, 197, 185, 121, 103, 147, 145, 88, 224, 167, 136, 144, 134, 217, 71, 111, 129, 213, 136, 12, 40 },
                            Username = "User2"
                        });
                });

            modelBuilder.Entity("SRA_HopsitalWebAPI.Models.Register", b =>
                {
                    b.HasOne("SRA_HopsitalWebAPI.Models.User", "User")
                        .WithMany("Registers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SRA_HopsitalWebAPI.Models.User", b =>
                {
                    b.Navigation("Registers");
                });
#pragma warning restore 612, 618
        }
    }
}
